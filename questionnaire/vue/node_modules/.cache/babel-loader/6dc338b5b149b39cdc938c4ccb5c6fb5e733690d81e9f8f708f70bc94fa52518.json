{"ast":null,"code":"import logs from \"@/views/manager/Logs\";\nexport default {\n  name: \"Design\",\n  data() {\n    return {\n      pages: {},\n      questionList: []\n    };\n  },\n  created() {\n    this.load();\n  },\n  methods: {\n    handleSaved() {\n      if (!this.validate()) {\n        // 校验没通过  不能发布\n        return;\n      }\n      this.$confirm('您确认发布吗？', '确认发布', {\n        type: \"warning\"\n      }).then(response => {\n        let data = JSON.parse(JSON.stringify(this.pages));\n        data.saved = '是';\n        this.$request.put('/pages/update/', data).then(res => {\n          if (res.code === '200') {\n            // 表示成功保存\n            this.$message.success('操作成功');\n            this.load();\n          } else {\n            this.$message.error(res.msg); // 弹出错误的信息\n          }\n        });\n      }).catch(err => console.log(err));\n    },\n    validate() {\n      let flag = false; // 检查内容是否为空  当flag = true 的时候就是空的内容\n      for (let i = 0; i < this.questionList.length; i++) {\n        if (this.questionList[i].type === '单选题' || this.questionList[i].type === '多选题') {\n          if (!this.questionList[i].questionItemList?.length) {\n            this.$message.warning('单选题和多选题需要添加选项');\n            return false;\n          }\n          this.questionList[i].questionItemList.forEach(item => {\n            if (!item.content) {\n              flag = true;\n            }\n          });\n        }\n        if (!this.questionList[i].name) {\n          this.$message.warning('请填写题目名称');\n          return false;\n        }\n        if (flag) {\n          this.$message.warning('请完善选项内容');\n          return false;\n        }\n      }\n      return true;\n    },\n    preview(pageId) {\n      if (this.validate()) {\n        // 校验通过了\n        window.open('/front/preview?pageId=' + pageId);\n      }\n    },\n    addQuestionItem(question) {\n      this.$request.post('/questionItem/add', {\n        questionId: question.id,\n        content: question.newContent\n      }).then(res => {\n        if (res.code === '200') {\n          // 表示成功保存\n          this.$message.success('操作成功');\n          this.load();\n        } else {\n          this.$message.error(res.msg); // 弹出错误的信息\n        }\n      });\n    },\n\n    addQuestion(type) {\n      this.$request.post('/question/addForUser', {\n        name: '',\n        type: type,\n        pageId: this.pages.id\n      }).then(res => {\n        if (res.code === '200') {\n          // 表示成功保存\n          this.$message.success('操作成功');\n          this.load();\n        } else {\n          this.$message.error(res.msg); // 弹出错误的信息\n        }\n      });\n    },\n\n    changeQuestionName(question) {\n      let data = JSON.parse(JSON.stringify(question));\n      this.$request.put('/question/update', data).then(res => {\n        if (res.code === '200') {\n          // 表示成功保存\n          this.$message.success('更新成功');\n          this.load();\n        } else {\n          this.$message.error(res.msg); // 弹出错误的信息\n        }\n      });\n    },\n\n    changeQuestionItem(questionItem) {\n      let data = JSON.parse(JSON.stringify(questionItem));\n      this.$request.put('/questionItem/update', data).then(res => {\n        if (res.code === '200') {\n          // 表示成功保存\n          this.$message.success('更新成功');\n          this.load();\n        } else {\n          this.$message.error(res.msg); // 弹出错误的信息\n        }\n      });\n    },\n\n    delQuestion(questionId) {\n      // 单个删除\n      this.$confirm('您确定删除吗？', '确认删除', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/question/delete/' + questionId).then(res => {\n          if (res.code === '200') {\n            // 表示操作成功\n            this.$message.success('操作成功');\n            this.load();\n          } else {\n            this.$message.error(res.msg); // 弹出错误的信息\n          }\n        });\n      }).catch(() => {});\n    },\n    delQuestionItem(questionItemId) {\n      // 单个删除\n      this.$confirm('您确定删除吗？', '确认删除', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/questionItem/delete/' + questionItemId).then(res => {\n          if (res.code === '200') {\n            // 表示操作成功\n            this.$message.success('操作成功');\n            this.load();\n          } else {\n            this.$message.error(res.msg); // 弹出错误的信息\n          }\n        });\n      }).catch(() => {});\n    },\n    load() {\n      let pageId = this.$route.query.pageId;\n      this.$request.get('/pages/selectById/' + pageId).then(res => {\n        this.pages = res.data || {};\n      });\n      this.$request.get('/question/selectByPageId', {\n        params: {\n          pageId: pageId\n        }\n      }).then(res => {\n        this.questionList = res.data || [];\n      });\n    }\n  }\n};","map":{"version":3,"names":["logs","name","data","pages","questionList","created","load","methods","handleSaved","validate","$confirm","type","then","response","JSON","parse","stringify","saved","$request","put","res","code","$message","success","error","msg","catch","err","console","log","flag","i","length","questionItemList","warning","forEach","item","content","preview","pageId","window","open","addQuestionItem","question","post","questionId","id","newContent","addQuestion","changeQuestionName","changeQuestionItem","questionItem","delQuestion","delete","delQuestionItem","questionItemId","$route","query","get","params"],"sources":["src/views/front/Design.vue"],"sourcesContent":["<template>\r\n    <div class=\"main-content\">\r\n        <div class=\"card\">\r\n            <div style=\"display: flex; margin-bottom: 20px\">\r\n                <div style=\"flex: 1\">\r\n                    <div>\r\n                        <span style=\"font-size: 24px; margin-right: 10px\">{{ pages.name }}</span>\r\n                        <el-tag v-if=\"pages.saved === '否'\">未发布</el-tag>\r\n                        <el-tag v-else type=\"success\">已发布</el-tag>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <el-button type=\"primary\"><i class=\"el-icon-share\"></i> 分享</el-button>\r\n                    <el-button type=\"info\" @click=\"preview(pages.id)\"><i class=\"el-icon-video-play\"></i> 预览</el-button>\r\n                    <el-button type=\"success\" :disabled=\"pages.saved === '是'\" @click=\"handleSaved\"><i\r\n                            class=\"el-icon-s-promotion\"></i> 发布\r\n                    </el-button>\r\n                </div>\r\n            </div>\r\n\r\n            <div style=\"margin-bottom: 20px\">\r\n                <el-button type=\"primary\" @click=\"addQuestion('单选题')\">新建单选题</el-button>\r\n                <el-button type=\"info\" @click=\"addQuestion('多选题')\">新建多选题</el-button>\r\n                <el-button type=\"success\" @click=\"addQuestion('填空题')\">新建填空题</el-button>\r\n            </div>\r\n\r\n            <div>\r\n                <div v-for=\"(item, index) in questionList\" :key=\"item.id\" style=\"margin-bottom: 20px\">\r\n                    <div>\r\n                        <span style=\"font-weight: bold; margin-right: 5px\">题目{{ index + 1 }}</span>\r\n                        <el-input v-model=\"item.name\" style=\"width: 70%; margin-right: 5px\"\r\n                                  @change=\"changeQuestionName(item)\"></el-input>\r\n                        <el-tag style=\"margin-right: 5px; color: #2a60c9\" v-if=\"item.type === '单选题'\">{{ item.type }}</el-tag>\r\n                        <el-tag style=\"margin-right: 5px; color: orange\" v-if=\"item.type === '多选题'\">{{ item.type }}</el-tag>\r\n                        <el-tag style=\"margin-right: 5px; color: seagreen\" v-if=\"item.type === '填空题'\">{{ item.type }}</el-tag>\r\n                        <span style=\"color: red; cursor: pointer; font-size: 12px\" @click=\"delQuestion(item.id)\"><i\r\n                                class=\"el-icon-delete\"></i>删除</span>\r\n                    </div>\r\n                    <div style=\"padding-left: 40px\" v-if=\"item.questionItemList?.length\">\r\n                        <div v-for=\"(sub, subIndex) in item.questionItemList\" :key=\"sub.id\" style=\"margin: 10px 0\">\r\n                            <div>\r\n                                <span style=\"margin-right: 5px\">选项{{ subIndex + 1 }}</span>\r\n                                <el-input v-model=\"sub.content\" style=\"width: 50%; margin-right: 5px\"\r\n                                          @change=\"changeQuestionItem(sub)\"></el-input>\r\n                                <span style=\"color: red; cursor: pointer; font-size: 12px\" @click=\"delQuestionItem(sub.id)\"><i\r\n                                        class=\"el-icon-delete\"></i>删除</span>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <span style=\"margin-right: 5px; color: #2a60c9\">新选项</span>\r\n                            <el-input v-model=\"item.newContent\" style=\"width: 50%; margin-right: 5px\"></el-input>\r\n                            <el-button type=\"primary\" class=\"btn-green\" size=\"mini\" @click=\"addQuestionItem(item)\">确认添加\r\n                            </el-button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import logs from \"@/views/manager/Logs\";\r\n\r\n    export default {\r\n        name: \"Design\",\r\n        data() {\r\n            return {\r\n                pages: {},\r\n                questionList: []\r\n            }\r\n        },\r\n        created() {\r\n            this.load()\r\n        },\r\n        methods: {\r\n            handleSaved() {\r\n                if (!this.validate()) { // 校验没通过  不能发布\r\n                    return\r\n                }\r\n                this.$confirm('您确认发布吗？', '确认发布', {type: \"warning\"}).then(response => {\r\n                    let data = JSON.parse(JSON.stringify(this.pages))\r\n                    data.saved = '是'\r\n                    this.$request.put('/pages/update/', data).then(res => {\r\n                        if (res.code === '200') {  // 表示成功保存\r\n                            this.$message.success('操作成功')\r\n                            this.load()\r\n                        } else {\r\n                            this.$message.error(res.msg)  // 弹出错误的信息\r\n                        }\r\n                    })\r\n                }).catch(err => console.log(err))\r\n            },\r\n            validate() {\r\n                let flag = false  // 检查内容是否为空  当flag = true 的时候就是空的内容\r\n                for (let i = 0; i < this.questionList.length; i++) {\r\n                    if (this.questionList[i].type === '单选题' || this.questionList[i].type === '多选题') {\r\n                        if (!this.questionList[i].questionItemList?.length) {\r\n                            this.$message.warning('单选题和多选题需要添加选项')\r\n                            return false\r\n                        }\r\n                        this.questionList[i].questionItemList.forEach(item => {\r\n                            if (!item.content) {\r\n                                flag = true\r\n                            }\r\n                        })\r\n                    }\r\n                    if (!this.questionList[i].name) {\r\n                        this.$message.warning('请填写题目名称')\r\n                        return false\r\n                    }\r\n                    if (flag) {\r\n                        this.$message.warning('请完善选项内容')\r\n                        return false\r\n                    }\r\n                }\r\n                return true\r\n            },\r\n            preview(pageId) {\r\n                if (this.validate()) { // 校验通过了\r\n                    window.open('/front/preview?pageId=' + pageId)\r\n                }\r\n            },\r\n            addQuestionItem(question) {\r\n                this.$request.post('/questionItem/add', {questionId: question.id, content: question.newContent}).then(res => {\r\n                    if (res.code === '200') {  // 表示成功保存\r\n                        this.$message.success('操作成功')\r\n                        this.load()\r\n                    } else {\r\n                        this.$message.error(res.msg)  // 弹出错误的信息\r\n                    }\r\n                })\r\n            },\r\n            addQuestion(type) {\r\n                this.$request.post('/question/addForUser', {name: '', type: type, pageId: this.pages.id}).then(res => {\r\n                    if (res.code === '200') {  // 表示成功保存\r\n                        this.$message.success('操作成功')\r\n                        this.load()\r\n                    } else {\r\n                        this.$message.error(res.msg)  // 弹出错误的信息\r\n                    }\r\n                })\r\n            },\r\n            changeQuestionName(question) {\r\n                let data = JSON.parse(JSON.stringify(question))\r\n                this.$request.put('/question/update', data).then(res => {\r\n                    if (res.code === '200') {  // 表示成功保存\r\n                        this.$message.success('更新成功')\r\n                        this.load()\r\n                    } else {\r\n                        this.$message.error(res.msg)  // 弹出错误的信息\r\n                    }\r\n                })\r\n            },\r\n            changeQuestionItem(questionItem) {\r\n                let data = JSON.parse(JSON.stringify(questionItem))\r\n                this.$request.put('/questionItem/update', data).then(res => {\r\n                    if (res.code === '200') {  // 表示成功保存\r\n                        this.$message.success('更新成功')\r\n                        this.load()\r\n                    } else {\r\n                        this.$message.error(res.msg)  // 弹出错误的信息\r\n                    }\r\n                })\r\n            },\r\n            delQuestion(questionId) {   // 单个删除\r\n                this.$confirm('您确定删除吗？', '确认删除', {type: \"warning\"}).then(response => {\r\n                    this.$request.delete('/question/delete/' + questionId).then(res => {\r\n                        if (res.code === '200') {   // 表示操作成功\r\n                            this.$message.success('操作成功')\r\n                            this.load()\r\n                        } else {\r\n                            this.$message.error(res.msg)  // 弹出错误的信息\r\n                        }\r\n                    })\r\n                }).catch(() => {\r\n                })\r\n            },\r\n            delQuestionItem(questionItemId) {   // 单个删除\r\n                this.$confirm('您确定删除吗？', '确认删除', {type: \"warning\"}).then(response => {\r\n                    this.$request.delete('/questionItem/delete/' + questionItemId).then(res => {\r\n                        if (res.code === '200') {   // 表示操作成功\r\n                            this.$message.success('操作成功')\r\n                            this.load()\r\n                        } else {\r\n                            this.$message.error(res.msg)  // 弹出错误的信息\r\n                        }\r\n                    })\r\n                }).catch(() => {\r\n                })\r\n            },\r\n            load() {\r\n                let pageId = this.$route.query.pageId\r\n                this.$request.get('/pages/selectById/' + pageId).then(res => {\r\n                    this.pages = res.data || {}\r\n                })\r\n\r\n                this.$request.get('/question/selectByPageId', {\r\n                    params: {\r\n                        pageId: pageId\r\n                    }\r\n                }).then(res => {\r\n                    this.questionList = res.data || []\r\n                })\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}